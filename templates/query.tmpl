{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// source: {{.SourceName}}

open Npgsql.FSharp
{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{range .Queries}}
{{- if $.OutputQuery .SourceName -}}
let {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}};

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} = { {{- range .Arg.UniqueFields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} = { {{- range .Ret.Struct.Fields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}} -> {{.Ret.DefineType}}  =
  let reader = fun read -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type}} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }

  db
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  |> Sql.execute reader
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}} -> {{.Ret.DefineType}} list =
  let reader = fun read -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type}} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }
  db 
  |> Sql.existingConnection
  |> sql.query {{.ConstantName}}
  |> {{.ConstantName}}
  |> Sql.execute reader
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}}  = 
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters [{{.Arg.Params}}]
  |> Sql.executeNonQuery
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}}) -> int =
  let reader = fun read -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type}} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }
  
  db
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  {{.Arg.Pair}}
  |> Sql.execute reader
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}}) -> QueryExecResult =
  let result = db.exec({{.ConstantName}}, [{{.Arg.Params}}]);
  if (result.length !== 1) {
    throw new Error("expected exec() to return a single query result")
  }

  return result[0];
{{- end -}}

{{- end -}}
{{- end -}}
{{- end -}}


