{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// source: {{.SourceName}}


module {{ .SourceName | stem | pascalCase}} 

open Npgsql
open Npgsql.FSharp

{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{range .Queries}}
{{- if $.OutputQuery .SourceName }}
let {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} = { {{- range .Arg.UniqueFields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{- end -}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} = { {{- range .Ret.Struct.Fields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{- end -}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end}}
let {{.MethodName}} (db: NpgsqlConnection) ({{.Arg.Pair}})  =
  let reader = fun (read:RowReader) -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type | type2readerFunc}} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }

  db
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  |> Sql.execute reader
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) ({{.Arg.Pair}})  =
  let reader = fun (read:RowReader) -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type | type2readerFunc }} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }
  db 
  |> Sql.existingConnection
  |> sql.query {{.ConstantName}}
  |> {{.ConstantName}}
  |> Sql.execute reader
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) ({{.Arg.Pair}})  = 
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  |> Sql.executeNonQuery
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}}) =
  let reader = fun (read:RowReader) -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name}} = read.{{$e.Type | type2readerFunc }} "{{$e.Name | snakeCase }}"
  {{- end -}}
  }

  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  |> Sql.executeRow
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} db: NpgsqlConnection {{.Arg.Pair}}) =
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  |> Sql.execute
{{ end }}

{{ end }}
{{ end }}
{{ end }}


