{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// source: {{.SourceName}}


module {{ .SourceName | stem | pascalCase}} 

open Npgsql
open Npgsql.FSharp
open System

{{ if not $.Options.EmitAutoOpenModel }}
open {{ $.Options.EmiitModelName }}
{{ end }}
{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{range .Queries}}
{{- if $.OutputQuery .SourceName }}
let {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} = { {{- range .Arg.UniqueFields}}
  {{.Name | pascalCase }}: {{.Type | json2str }};
  {{- end}}
}
{{- end -}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} = { {{- range .Ret.Struct.Fields}}
  {{.Name | pascalCase }}: {{.Type}};
  {{- end}}
}
{{- end -}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end}}
let {{.MethodName}} (db: NpgsqlConnection) {{if .Arg.Pair}} ({{.Arg.Pair}}) {{- end }}  =
  {{ if  .Ret.UniqueFieldsCountMultiple }}
  let reader = fun (read:RowReader) -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name | pascalCase }} = read.{{$e.Type | type2readerFunc }} "{{$e.Name }}"
  {{- end -}}
  }
  {{ else}}
  {{- range $i, $e := .Ret.UniqueFields}}
  let reader = fun (read:RowReader) -> read.{{$e.Type | type2readerFunc }} "{{$e.Name }}"
  {{- end -}}
  {{end}}

  db
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  {{ if .Arg.NpgsqlParams -}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  {{ end -}}
  |> Sql.executeRow{{if $.Options.EmitAsyncCode}}Async{{end}} reader
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) {{if .Arg.Pair}} ({{.Arg.Pair}}) {{- end }} =
  let reader = fun (read:RowReader) -> {
  {{- range $i, $e := .Ret.UniqueFields}}
    {{$e.Name | pascalCase }} = read.{{$e.Type | type2readerFunc }} "{{$e.Name}}"
  {{- end -}}
  }
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  {{ if .Arg.NpgsqlParams -}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  {{ end -}}
  |> Sql.execute{{if $.Options.EmitAsyncCode}}Async{{end}} reader
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) {{if .Arg.Pair}} ({{.Arg.Pair}}) {{- end }}  = 
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  {{ if .Arg.NpgsqlParams -}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  {{ end -}}
  |> Sql.executeNonQuery{{if $.Options.EmitAsyncCode}}Async{{end}}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) {{if .Arg.Pair}} ({{.Arg.Pair}}) {{- end }} =
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  {{ if .Arg.NpgsqlParams -}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  {{ end -}}
  |> Sql.executeNonQuery{{if $.Options.EmitAsyncCode }}Async{{end}}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
let {{.MethodName}} (db: NpgsqlConnection) {{if .Arg.Pair}} ({{.Arg.Pair}}) {{- end }} =
  db 
  |> Sql.existingConnection
  |> Sql.query {{.ConstantName}}
  {{ if .Arg.NpgsqlParams -}}
  |> Sql.parameters  [ {{ .Arg.NpgsqlParams }} ]
  {{ end -}}
  |> Sql.execute{{if $.Options.EmitAsyncCode}}Async{{end}}
{{ end }}

{{ end }}
{{ end }}
{{ end }}


