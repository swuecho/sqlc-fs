// Code generated by sqlc. DO NOT EDIT.
// source: chat_model.sql

open Npgsql.FSharp

module ChatModel =




let chatModelByID = """-- name: ChatModelByID :one
SELECT id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit FROM chat_model WHERE id = @id
"""


type ChatModelByIDRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let ChatModelByID (db: NpgsqlConnection) (id: int32)  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query chatModelByID
  |> Sql.parameters  [ "@id", Sql.int id ]
  |> Sql.execute reader












let chatModelByName = """-- name: ChatModelByName :one
SELECT id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit FROM chat_model WHERE name = @name
"""


type ChatModelByNameRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let ChatModelByName (db: NpgsqlConnection) (name: string)  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query chatModelByName
  |> Sql.parameters  [ "@name", Sql.string name ]
  |> Sql.execute reader



















let createChatModel = """-- name: CreateChatModel :one
INSERT INTO chat_model (name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit)
VALUES (@name, @label, @is_default, @url, @api_auth_header, @api_auth_key, @user_id, @enable_per_mode_ratelimit)
RETURNING id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit
"""


type CreateChatModelParams = {
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}
type CreateChatModelRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let CreateChatModel (db: NpgsqlConnection) (arg: CreateChatModelParams)  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query createChatModel
  |> Sql.parameters  [ "@name", Sql.string arg.name, "@label", Sql.string arg.label, "@is_default", Sql.bool arg.is_default, "@url", Sql.string arg.url, "@api_auth_header", Sql.string arg.api_auth_header, "@api_auth_key", Sql.string arg.api_auth_key, "@user_id", Sql.int arg.user_id, "@enable_per_mode_ratelimit", Sql.bool arg.enable_per_mode_ratelimit ]
  |> Sql.execute reader


























let deleteChatModel = """-- name: DeleteChatModel :exec
DELETE FROM chat_model WHERE id = @id and user_id = @user_id
"""


type DeleteChatModelParams = {
  ID: int32;
  UserID: int32;
}




let DeleteChatModel (db: NpgsqlConnection) (arg: DeleteChatModelParams)  = 
  db 
  |> Sql.existingConnection
  |> Sql.query deleteChatModel
  |> Sql.parameters  [ "@id", Sql.int arg.id, "@user_id", Sql.int arg.user_id ]
  |> Sql.executeNonQuery




































let getDefaultChatModel = """-- name: GetDefaultChatModel :one
SELECT id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit FROM chat_model WHERE is_default = true
and user_id in (select id from auth_user where is_superuser = true)
"""


type GetDefaultChatModelRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let GetDefaultChatModel (db: NpgsqlConnection) ()  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query getDefaultChatModel
  |> Sql.parameters  [  ]
  |> Sql.execute reader



























let listChatModels = """-- name: ListChatModels :many
SELECT id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit FROM chat_model ORDER BY id
"""


type ListChatModelsRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}


let ListChatModels (db: NpgsqlConnection) ()  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}
  db 
  |> Sql.existingConnection
  |> sql.query listChatModels
  |> listChatModels
  |> Sql.execute reader











let listSystemChatModels = """-- name: ListSystemChatModels :many
SELECT id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit FROM chat_model
where user_id in (select id from auth_user where is_superuser = true)
ORDER BY id
"""


type ListSystemChatModelsRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}


let ListSystemChatModels (db: NpgsqlConnection) ()  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}
  db 
  |> Sql.existingConnection
  |> sql.query listSystemChatModels
  |> listSystemChatModels
  |> Sql.execute reader






















let updateChatModel = """-- name: UpdateChatModel :one
UPDATE chat_model SET name = @name, label = @label, is_default = @is_default, url = @url, api_auth_header = @api_auth_header, api_auth_key = @api_auth_key, enable_per_mode_ratelimit = @enable_per_mode_ratelimit
WHERE id = @id and user_id = @user_id
RETURNING id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit
"""


type UpdateChatModelParams = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}
type UpdateChatModelRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let UpdateChatModel (db: NpgsqlConnection) (arg: UpdateChatModelParams)  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query updateChatModel
  |> Sql.parameters  [ "@id", Sql.int arg.id, "@name", Sql.string arg.name, "@label", Sql.string arg.label, "@is_default", Sql.bool arg.is_default, "@url", Sql.string arg.url, "@api_auth_header", Sql.string arg.api_auth_header, "@api_auth_key", Sql.string arg.api_auth_key, "@user_id", Sql.int arg.user_id, "@enable_per_mode_ratelimit", Sql.bool arg.enable_per_mode_ratelimit ]
  |> Sql.execute reader












let updateChatModelKey = """-- name: UpdateChatModelKey :one
UPDATE chat_model SET api_auth_key = @api_auth_key
WHERE id = @id
RETURNING id, name, label, is_default, url, api_auth_header, api_auth_key, user_id, enable_per_mode_ratelimit
"""


type UpdateChatModelKeyParams = {
  ID: int32;
  ApiAuthKey: string;
}
type UpdateChatModelKeyRow = {
  ID: int32;
  Name: string;
  Label: string;
  IsDefault: bool;
  Url: string;
  ApiAuthHeader: string;
  ApiAuthKey: string;
  UserID: int32;
  EnablePerModeRatelimit: bool;
}

let UpdateChatModelKey (db: NpgsqlConnection) (arg: UpdateChatModelKeyParams)  =
  let reader = fun (read:RowReader) -> {
    ID = read.int "id"
    Name = read.string "name"
    Label = read.string "label"
    IsDefault = read.bool "is_default"
    Url = read.string "url"
    ApiAuthHeader = read.string "api_auth_header"
    ApiAuthKey = read.string "api_auth_key"
    UserID = read.int "user_id"
    EnablePerModeRatelimit = read.bool "enable_per_mode_ratelimit"}

  db
  |> Sql.existingConnection
  |> Sql.query updateChatModelKey
  |> Sql.parameters  [ "@id", Sql.int arg.id, "@api_auth_key", Sql.string arg.api_auth_key ]
  |> Sql.execute reader


























